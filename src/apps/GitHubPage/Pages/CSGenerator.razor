@page "/CSGenerator"
@using System.ComponentModel.DataAnnotations
@using Common.Casing
@using Microsoft.CodeAnalysis
@using CurrieTechnologies.Razor.Clipboard
@inject ClipboardService clipboard

<h1>Generate C# from JSON</h1>

<EditForm Model="@_settings" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="json">JSON: </label>
        <InputTextArea rows="10" class="form-control form-control-lg" id="json" @bind-Value="@_settings.Json"/>
    </div>
    <div class="form-group">
        <label for="propertyCasingSelector">Casing for properties: </label>
        <InputSelect class="form-control form-control-lg" id="propertyCasingSelector" @bind-Value="@_settings.PropertyCasing">
            @foreach (var casingOption in CasingOptions) {
                <option>@casingOption</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="classCasingSelector">Casing for classes: </label>
        <InputSelect class="form-control form-control-lg" id="classCasingSelector" @bind-Value="@_settings.ClassCasing">
            @foreach (var casingOption in CasingOptions) {
                <option>@casingOption</option>
            }
        </InputSelect>
    </div>
    <div class="form-group">
        <label for="classPrefix">Class Prefix: </label>
        <InputText type="text" class="form-control form-control-lg " id="classPrefix" @bind-Value="@_settings.ClassPrefix"></InputText>
    </div>
    <div class="form-group">
        <label for="classSuffix">Class Suffix: </label>
        <InputText type="text" class="form-control form-control-lg " id="classSuffix" @bind-Value="@_settings.ClassSuffix"></InputText>
    </div>
    <div class="form-group">
        <label for="namespace">Namespace: </label>
        <InputText type="text" class="form-control form-control-lg " id="namespace" @bind-Value="@_settings.NameSpace"></InputText>
    </div>
    <div class="form-group">
        <label for="rootName">Root object name: </label>
        <InputText type="text" class="form-control form-control-lg " id="rootName" @bind-Value="@_settings.RootName"></InputText>
    </div>
    <button class="btn btn-primary" type="submit">Generate C#</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(CSharp)) {
    <button style="margin-top: 30px" type="button" class="btn btn-primary" @onclick="(async e => await clipboard.WriteTextAsync(CSharp))">Copy To Clipboard</button>
}

@if (!string.IsNullOrWhiteSpace(CSharp)) {
    <pre style="margin-top: 20px" class="text-success bg-dark">
@* This can not be indented *@
@CSharp
    </pre>
}

@code {
    private string StatusClass { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private static IReadOnlyList<string> CasingOptions { get; } = Casing.Cases;

    class SettingsModel {
        [Required]
        public string Json { get; set; } = @"{""foo"":""bar""}";

        [Required]
        public string PropertyCasing { get; set; } = CasingOptions[0];

        [Required]
        public string ClassCasing { get; set; } = CasingOptions[0];

        public string ClassPrefix { get; set; } = string.Empty;
        public string ClassSuffix { get; set; } = "Model";
        public string NameSpace { get; set; } = string.Empty;
        public string RootName { get; set; } = "Root";
    }

    private readonly SettingsModel _settings = new SettingsModel();

    private string CSharp { get; set; }

    private void HandleValidSubmit() {
        CSharp = null;
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        Factory.ConfiguredCSharpFromJson(
            _settings.Json,
            new CSharpSettings {
                PropertyCasing = _settings.PropertyCasing,
                ClassPrefix = _settings.ClassPrefix,
                ClassSuffix = _settings.ClassSuffix,
                NameSpace = _settings.NameSpace,
                RootObjectName = _settings.RootName,
                ClassCasing = _settings.ClassCasing
            }
            )
            .Map(x => CSharpSyntaxTree.ParseText(x))
            .Map(x => x.GetRoot())
            .Map(x => x.NormalizeWhitespace())
            .Map(x => x.ToFullString())
            .Match(x => CSharp = x,
                x => {
                    StatusMessage = x.Message;
                    HandleInvalidSubmit();
                }
            );
    }

    private void HandleInvalidSubmit() {
        CSharp = null;
        StatusClass = "alert-danger";
    }

}