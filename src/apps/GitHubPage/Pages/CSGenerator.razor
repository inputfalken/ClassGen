@page "/CSGenerator"
@using System.ComponentModel.DataAnnotations
@using Microsoft.CodeAnalysis
@using CurrieTechnologies.Razor.Clipboard
@inject ClipboardService Clipboard

<p class="h1">Generate C# from JSON</p>

<EditForm Model="@_view" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-row">

        <div class="col-auto">
            <label for="rootName">Root object name: </label>
            <InputText type="text" class="form-control form-control-lg " id="rootName" @bind-Value="@_view.RootName"></InputText>
        </div>

        <div class="col-auto">
            <label for="classPrefix">Class Prefix: </label>
            <InputText type="text" class="form-control form-control-lg " id="classPrefix" @bind-Value="@_view.ClassPrefix"></InputText>
        </div>

        <div class="col-auto">
            <label for="classSuffix">Class Suffix: </label>
            <InputText type="text" class="form-control form-control-lg " id="classSuffix" @bind-Value="@_view.ClassSuffix"></InputText>
        </div>

        <div class="col-auto">
            <label for="namespace">Namespace: </label>
            <InputText type="text" class="form-control form-control-lg " id="namespace" @bind-Value="@_view.NameSpace"></InputText>
        </div>

        <div class="col-auto">
            <label for="propertyCasingSelector">Casing for properties: </label>
            <InputSelect class="form-control form-control-lg" id="propertyCasingSelector" @bind-Value="@_view.PropertyCasing">
                @foreach (var casingOption in CasingOptions)
                {
                    <option>@casingOption</option>
                }
            </InputSelect>
        </div>
        <div class="col-auto">

            <label for="classCasingSelector">Casing for classes: </label>
            <InputSelect class="form-control form-control-lg" id="classCasingSelector" @bind-Value="@_view.ClassCasing">
                @foreach (var casingOption in CasingOptions)
                {
                    <option>@casingOption</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-row">
        <div class="col-8">
            <label for="json">JSON: </label>
            <InputTextArea rows="10" class="form-control form-control-lg" id="json" @bind-Value="@_view.Json"/>
        </div>
    </div>
    <button class="btn btn-primary mt-2" type="submit">Generate C#</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(_view.CSharp))
{
    <div class="row mt-2">
        <div class="col-auto">
            <button type="button" class="btn btn-primary " @onclick="(async e => await Clipboard.WriteTextAsync(_view.CSharp))">Copy To Clipboard</button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-auto">
            <pre class="text-success bg-dark px-5">
@_view.CSharp
            </pre>
        </div>
    </div>
}


@code {
    private string StatusClass { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
    private static IReadOnlyList<string> CasingOptions { get; } = Common.Casing.Cases;

    private class ViewModel
    {
        [Required]
        public string Json { get; set; } = @"{""foo"":""bar""}";

        [Required]
        public string PropertyCasing { get; set; } = CasingOptions[0];

        [Required]
        public string ClassCasing { get; set; } = CasingOptions[0];

        public string ClassPrefix { get; set; } = string.Empty;
        public string ClassSuffix { get; set; } = "Model";
        public string NameSpace { get; set; } = string.Empty;
        public string RootName { get; set; } = "Root";
        public string CSharp { get; set; }
    }

    private readonly ViewModel _view = new ViewModel();

    private void HandleValidSubmit()
    {
        _view.CSharp = null;
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        Factory.ConfiguredCSharpFromJson(
            _view.Json,
            new CSharpSettings
            {
                PropertyCasing = _view.PropertyCasing,
                ClassPrefix = _view.ClassPrefix,
                ClassSuffix = _view.ClassSuffix,
                NameSpace = _view.NameSpace,
                RootObjectName = _view.RootName,
                ClassCasing = _view.ClassCasing
            }
            )
            .Map(x => CSharpSyntaxTree.ParseText(x))
            .Map(x => x.GetRoot())
            .Map(x => x.NormalizeWhitespace())
            .Map(x => x.ToFullString())
            .Match(x => _view.CSharp = x,
                x =>
                {
                    StatusMessage = x.Message;
                    HandleInvalidSubmit();
                }
            );
    }

    private void HandleInvalidSubmit()
    {
        _view.CSharp = null;
        StatusClass = "alert-danger";
    }

}