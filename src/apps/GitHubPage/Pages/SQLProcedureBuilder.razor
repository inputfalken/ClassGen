@page "/SQLProcedureBuilder"
@using CurrieTechnologies.Razor.Clipboard
@using System.ComponentModel.DataAnnotations
@inject ClipboardService clipboard

<h1>SQL Procedure Builder</h1>

<EditForm Model="@_view" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label>Procedure Name: </label>
        <InputText class="form-control" @bind-Value="@_view.ProcedureName"/>
    </div>
    <div class="form-group">
        <button type="button" class="btn btn-primary" @onclick="@(() => _view.SqlDataTypes.Add(new ViewModel.SqlDataTypeViewModel()))">Add DataType</button>
    </div>
    <div style="display: @(_view.SqlDataTypes.Count > 0 ? "block" : "none")" class="mt-2">

        @foreach (var element in _view.SqlDataTypes.Select((x, y) => new {Item = x, Index = y}))
        {
            var humanIndex = element.Index + 1;
            <h3>@DataType: @humanIndex</h3>

            <div class="form-group">
                <label>Name </label>
                <InputText class="form-control" @bind-Value="@element.Item.Name"/>
            </div>

            <div class="form-group">
                <label for="sqlDataType">Datatype </label>
                <InputSelect class="form-control form-control-lg" id="sqlDataType" @bind-Value="element.Item.DataType">
                    @foreach (var datatype in SqlProcedureApiModel.DataTypes2)
                    {
                        <option>@datatype</option>
                    }
                </InputSelect>
            </div>

            <div class="form-group">
                <button type="button" class="btn btn-danger mt-2" @onclick="@(() => _view.SqlDataTypes.Remove(element.Item))">Remove @DataType</button>
            </div>
        }
    </div>
    <div class="form-group">
        <button type="button" class="btn btn-primary mt-2" @onclick="@(() => _view.SqlUserTypes.Add(new ViewModel.SqlUserTypeViewModel()))">Add @UserDefinedType</button>
    </div>
    <div style="display: @(_view.SqlUserTypes.Count > 0 ? "block" : "none")" class="mt-2">

        @foreach (var element in _view.SqlUserTypes.Select((x, y) => new {Item = x, Index = y}))
        {
            var humanIndex = element.Index + 1;

            <h3>@($"{UserDefinedType} {element.Item.Name} {humanIndex}")</h3>

            <div class="form-group">
                <label>Name </label>
                <InputText class="form-control" @bind-Value="@element.Item.Name"/>
            </div>

            <div class="form-group">
                <button type="button" class="btn btn-primary" @onclick="@(() => element.Item.SqlDataTypes.Add(new ViewModel.SqlDataTypeViewModel()))">Add @DataType</button>
            </div>
            @foreach (var subElement in element.Item.SqlDataTypes.Select((x, y) => new {Item = x, Index = y}))
            {
                <h4> @($"{DataType}: {subElement.Index + 1}")</h4>

                <div class="form-group">
                    <label>Name</label>
                    <InputText class="form-control" @bind-Value="@subElement.Item.Name"/>
                </div>

                <div class="form-group">
                    <label for="sqlDataType">Type </label>
                    <InputSelect class="form-control form-control-lg" id="sqlDataType" @bind-Value="subElement.Item.DataType">
                        @foreach (var datatype in SqlProcedureApiModel.DataTypes2)
                        {
                            <option>@datatype</option>
                        }
                    </InputSelect>
                </div>

                <div class="form-group">
                    <button type="button" class="btn btn-danger" @onclick="@(() => element.Item.SqlDataTypes.Remove(subElement.Item))">Remove @DataType</button>
                </div>
            }

            <div class="form-group">
                <button type="button" class="btn btn-danger" @onclick="@(() => _view.SqlUserTypes.Remove(element.Item))">Remove @UserDefinedType</button>
            </div>
        }
    </div>

    <button class="btn btn-success mt-2" type="submit">Generate SQL</button>
</EditForm>

@if (!string.IsNullOrWhiteSpace(Sql))
{
    <button type="button" class="btn btn-primary mt-2" @onclick="(async e => await clipboard.WriteTextAsync(Sql))">Copy To Clipboard</button>
}

@if (!string.IsNullOrWhiteSpace(Sql))
{
    <pre class="text-success bg-dark mt-2">
@* This can not be indented *@
@Sql
    </pre>
}

@code {
    private string StatusClass { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
        const string UserDefinedType = "UserType";
        const string DataType = "DataType";

    private class ViewModel
    {
        [Required]
        public string ProcedureName { get; set; } = "DoStuff";

        public List<SqlDataTypeViewModel> SqlDataTypes { get; } = new List<SqlDataTypeViewModel>();
        public List<SqlUserTypeViewModel> SqlUserTypes { get; } = new List<SqlUserTypeViewModel>();

        public class SqlDataTypeViewModel
        {
            [Required]
            public string Name { get; set; } = "arg";

            [Required]
            public SqlDataApiEnum DataType { get; set; } = SqlDataApiEnum.Int;
        }

        public class SqlUserTypeViewModel
        {
            [Required]
            public string Name { get; set; } = "arg";

            public List<SqlDataTypeViewModel> SqlDataTypes { get; } = new List<SqlDataTypeViewModel>();
        }
    }

    private readonly ViewModel _view = new ViewModel();

    private string Sql { get; set; }

    private void HandleValidSubmit()
    {
        Sql = null;
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        Sql = Factory.StoredProcedure(
            new SqlProcedureApiModel(
                _view.SqlDataTypes.Select(x => new SqlProcedureDataTypeParameterApiModel(x.DataType, x.Name)),
                _view.SqlUserTypes.Select(x =>
                    new SqlProcedureUserTypeParameterApiModel(
                        x.SqlDataTypes.Select(y => new SqlProcedureDataTypeParameterApiModel(y.DataType, y.Name)), x.Name)
                    ),
                _view.ProcedureName
                )
            );
    }

    private void HandleInvalidSubmit()
    {
        Sql = null;
        StatusClass = "alert-danger";
    }

}