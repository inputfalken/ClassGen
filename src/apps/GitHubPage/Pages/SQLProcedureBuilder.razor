@page "/SQLProcedureBuilder"
@using CurrieTechnologies.Razor.Clipboard
@using System.ComponentModel.DataAnnotations
@inject ClipboardService clipboard

<p class="h1">SQL Procedure Builder</p>

<EditForm Model="@_view" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-row">
        <div class="col-auto">
            <p class="h2">Procedure Name: </p>
        </div>
        
        <div class="col-auto">
            <InputText class="form-control" @bind-Value="@_view.ProcedureName"/>
        </div>
    </div>

    @foreach (var element in _view.SqlDataTypes.Select((x, y) => new {Item = x, Index = y}))
    {
        var humanIndex = element.Index + 1;
        var dataTypeId = "dataType" + humanIndex;
        var nameId = "dataName" + humanIndex;


        <div class="form-row">
            <div class="col-auto offset-1">
                <p class="h3">@DataType: @humanIndex</p>
            </div>

            <div class="col-auto">
                <InputText id="@nameId" placeholder="Name" class="form-control" @bind-Value="@element.Item.Name"/>
            </div>

            <div class="col-auto">
                <InputSelect class="form-control" id="@dataTypeId" @bind-Value="element.Item.DataType">
                    @foreach (var datatype in SqlProcedureApiModel.DataTypes2)
                    {
                        <option>@datatype</option>
                    }
                </InputSelect>
            </div>

            <div class="col-auto">
                <button type="button" class="btn btn-danger" @onclick="@(() => _view.SqlDataTypes.Remove(element.Item))">Remove</button>
            </div>

        </div>
    }

    <div style="display: @(_view.SqlUserTypes.Count > 0 ? "block" : "none")">

        @foreach (var element in _view.SqlUserTypes.Select((x, y) => new {Item = x, Index = y}))
        {
            var userTypeHumanIndex = element.Index + 1;
            var userTypeNameId = "userTypeName" + userTypeHumanIndex;

            <div class="form-row">

                <div class="col-auto offset-1">
                    <p class="h3">@($"{UserDefinedType} {element.Item.Name} {userTypeHumanIndex}")</p>
                </div>

                <div class="col-auto">
                    <InputText id="@userTypeNameId" class="form-control" @bind-Value="@element.Item.Name"/>
                </div>

                <div class="col-auto">
                    <button type="button" class="btn btn-primary" @onclick="@(() => element.Item.SqlDataTypes.Add(new ViewModel.SqlDataTypeViewModel()))">Add</button>
                </div>
                
                <div class="col-auto">
                    <button type="button" class="btn btn-danger" @onclick="@(() => _view.SqlUserTypes.Remove(element.Item))">Remove</button>
                </div>

            </div>

            @foreach (var subElement in element.Item.SqlDataTypes.Select((x, y) => new {Item = x, Index = y}))
            {
                var userTypeDataHumanIndex = subElement.Index + 1;
                var userDataTypeNameId = "userTypeName" + userTypeDataHumanIndex;
                var userTypeDataTypeId = "userTypeDataType" + userTypeDataHumanIndex;
                <div class="form-row">

                    <div class="col-auto offset-2">
                        <p class="h4"> @($"{DataType}: {userTypeDataHumanIndex}")</p>
                    </div>

                    <div class="col-auto">
                        <InputText class="form-control" id="@userDataTypeNameId" @bind-Value="@subElement.Item.Name"/>
                    </div>

                    <div class="col-auto">
                        <InputSelect class="form-control" id="@userTypeDataTypeId" @bind-Value="subElement.Item.DataType">
                            @foreach (var datatype in SqlProcedureApiModel.DataTypes2)
                            {
                                <option>@datatype</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-auto">
                        <button type="button" class="btn btn-danger" @onclick="@(() => element.Item.SqlDataTypes.Remove(subElement.Item))">Remove</button>
                    </div>

                </div>
            }
        }
    </div>

    <div class="form-row">
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="@(() => _view.SqlDataTypes.Add(new ViewModel.SqlDataTypeViewModel()))">Add @DataType</button>
        </div>

        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="@(() => _view.SqlUserTypes.Add(new ViewModel.SqlUserTypeViewModel()))">Add @UserDefinedType</button>
        </div>

        <div class="col-auto">
            <button class="btn btn-success" type="submit">Generate SQL</button>
        </div>
    </div>


</EditForm>

@if (!string.IsNullOrWhiteSpace(Sql))
{
    <button type="button" class="btn btn-primary" @onclick="(async e => await clipboard.WriteTextAsync(Sql))">Copy To Clipboard</button>
    <pre class="text-success bg-dark">
@* This can not be indented *@
@Sql
    </pre>
}

@code {
    private string StatusClass { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;
        const string UserDefinedType = "User type";
        const string DataType = "Data type";

    private class ViewModel
    {
        [Required]
        public string ProcedureName { get; set; } = "InsertElement";

        public List<SqlDataTypeViewModel> SqlDataTypes { get; } = new List<SqlDataTypeViewModel>();
        public List<SqlUserTypeViewModel> SqlUserTypes { get; } = new List<SqlUserTypeViewModel>();

        public class SqlDataTypeViewModel
        {
            [Required]
            public string Name { get; set; }

            [Required]
            public SqlDataApiEnum DataType { get; set; } = SqlDataApiEnum.Int;
        }

        public class SqlUserTypeViewModel
        {
            [Required]
            public string Name { get; set; }

            public List<SqlDataTypeViewModel> SqlDataTypes { get; } = new List<SqlDataTypeViewModel>();
        }
    }

    private readonly ViewModel _view = new ViewModel();

    private string Sql { get; set; }

    private void HandleValidSubmit()
    {
        Sql = null;
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        Sql = Factory.StoredProcedure(
            new SqlProcedureApiModel(
                _view.SqlDataTypes.Select(x => new SqlProcedureDataTypeParameterApiModel(x.DataType, x.Name)),
                _view.SqlUserTypes.Select(x =>
                    new SqlProcedureUserTypeParameterApiModel(
                        x.SqlDataTypes.Select(y => new SqlProcedureDataTypeParameterApiModel(y.DataType, y.Name)), x.Name)
                    ),
                _view.ProcedureName
                )
            );
    }

    private void HandleInvalidSubmit()
    {
        Sql = null;
        StatusClass = "alert-danger";
    }

}