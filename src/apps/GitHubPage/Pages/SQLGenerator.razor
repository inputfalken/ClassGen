@page "/SQLGenerator"
@using System.ComponentModel.DataAnnotations
@using CurrieTechnologies.Razor.Clipboard
@inject ClipboardService clipboard

<h1>Generate SQL from CSharp</h1>

<EditForm Model="@_view" OnValidSubmit="@HandleValidSubmit" OnInvalidSubmit="@HandleInvalidSubmit">
    <div class="alert @StatusClass">@StatusMessage</div>
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-row">
        <div class="col-8">
            <label for="CSharp">C#: </label>
            <InputTextArea rows="10" class="form-control form-control-lg" id="CSharp" @bind-Value="@_view.CSharp"/>
        </div>
    </div>
    <div class="form-row mt-2">
        <div class="col-auto">
            <button class="btn btn-success" type="submit">Generate SQL</button>
        </div>
        <div class="col-auto">
            <div class="form-check">
                <InputCheckbox class="form-check-input" id="generateUserDefinedTable" @bind-Value="@_view.Settings.GenerateUserDefinedTable"/>
                <label class="form-check-label" for="generateUserDefinedTable">Batchable</label>
            </div>
        </div>
    </div>
</EditForm>

@if (!string.IsNullOrWhiteSpace(Sql))
{
    <div class="row mt-2">
        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick="async e => await clipboard.WriteTextAsync(Sql)">Copy To Clipboard</button>
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-auto">
            <pre class="text-success bg-dark px-5">
@Sql
            </pre>
        </div>

    </div>
}

@code {
    private string StatusClass { get; set; } = string.Empty;
    private string StatusMessage { get; set; } = string.Empty;

    private class ViewModel
    {
        [Required]
        public string CSharp { get; set; } = "public class Foo { public int Bar { get; set; } }";

        public SqlSettingsApiModel Settings { get; set; } = new SqlSettingsApiModel();
    }

    private readonly ViewModel _view = new ViewModel();

    private string Sql { get; set; }

    private void HandleValidSubmit()
    {
        Sql = null;
        StatusClass = string.Empty;
        StatusMessage = string.Empty;
        Factory
            .ConfiguredStoredProcedureFromCsharp(_view.CSharp, _view.Settings)
            .Match(
                x => Sql = x,
                x =>
                {
                    StatusMessage = x.Message;
                    HandleInvalidSubmit();
                }
            );
    }

    private void HandleInvalidSubmit()
    {
        Sql = null;
        StatusClass = "alert-danger";
    }

}